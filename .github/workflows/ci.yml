name: CI - Tests de l'application

on:
  push:
    branches:
      - dev

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v2

      - name: Récupérer la variable d'environnement VITE_API_BASE_URL_BACK
        env:
          VITE_API_BASE_URL_BACK: ${{ secrets.VITE_API_BASE_URL_BACK }}
        run: echo "VITE_API_BASE_URL_BACK=${VITE_API_BASE_URL_BACK}" >> .env

      - name: Afficher le contenu du fichier .env
        run: cat .env

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies
        run: npm install

      - name: Lintage du code
        run: npm run lint

      - name: Lancement du projet en arrière-plan
        run: |
          npm run dev &
          sleep 30  # Attendre quelques secondes pour que le projet démarre complètement

      - name: Exécuter les tests
        run: |
          npx cypress run

      - name: Déterminer l'état des tests
        id: determine-test-status
        run: |
          if [ -s "cypress/results/*/*.json" ]; then
            echo "Tests passed"
          else
            echo "Tests failed"
          fi

      - name: Set build status
        if: ${{ always() }}
        uses: actions/github-script@v5
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { context, github } = require('@actions/github');
            const state = '${{ steps.determine-test-status.outputs }}' === 'Tests passed';
            const description = state ? 'Tests passed' : 'Tests failed';
            const targetUrl = /* URL vers les détails des tests, par exemple, les logs */;
            github.repos.createCommitStatus({
              ...context.repo,
              sha: context.sha,
              state: state ? 'success' : 'failure',
              target_url: targetUrl,
              description: description,
              context: 'GitHub Actions - Tests'
            });
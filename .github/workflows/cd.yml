name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '*'
permissions:
  contents: read # for checkout

jobs:
#  test:
#    runs-on: ubuntu-latest

#    steps:
#      - name: ‚è≥ Checkout du code
#        uses: actions/checkout@v2
#
#      - name: ‚è≥ R√©cup√©rer la variable d'environnement VITE_API_BASE_URL_BACK
#        env:
#          VITE_API_BASE_URL_BACK: ${{ secrets.VITE_API_BASE_URL_BACK }}
#        run: echo "VITE_API_BASE_URL_BACK=${VITE_API_BASE_URL_BACK}" >> .env
#
#      - name: ‚è≥ Afficher le contenu du fichier .env
#        run: cat .env
#
#      - name: üöß Cache node modules
#        id: cache-npm
#        uses: actions/cache@v3
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-
#
#      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
#        name: ‚è≥ List the state of node modules
#        continue-on-error: true
#        run: npm list
#
#      - name: ‚è≥ Install dependencies
#        run: npm install
#
#      - name: üöß Save node_modules
#        uses: actions/upload-artifact@v3
#        with:
#          name: node_modules
#          path: ~/.npm
#
#      - name: ‚è≥ Lintage du code
#        run: npm run lint
#
#      - name: üöÄ Lancement du projet en arri√®re-plan
#        run: |
#          npm run dev &
#          sleep 30  # Attendre quelques secondes pour que le projet d√©marre compl√®tement
#
#      - name: üöß Ex√©cuter les tests
#        run: |
#          npx cypress run

  release:
    permissions:
      contents: write # to be able to publish a GitHub release
      issues: write # to be able to comment on released issues
      pull-requests: write # to be able to comment on released pull requests
      id-token: write # to enable use of OIDC for npm provenance
    name: release
    runs-on: ubuntu-latest
    steps:
      - name: üöß Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: ‚è≥ List the state of node modules
        continue-on-error: true
        run: npm list

      - name: ‚è≥ Install dependencies
        run: npm install

      - uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      - uses: actions/setup-node@0a44ba7841725637a19e28fa30b79a866c81b0a6 # v4.0.4
        with:
          cache: npm
          node-version: lts/*
      - run: npm ci
      # pinned version updated automatically by Renovate.
      # details at https://semantic-release.gitbook.io/semantic-release/usage/installation#global-installation
      - run: npx semantic-release@21.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.SEMANTIC_RELEASE_BOT_NPM_TOKEN }}

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: D√©ploiement sur le VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd front-app/
            docker compose down
            git pull
            docker compose up --build -d

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    tags:
      - '*'
permissions:
  contents: read # for checkout

jobs:
#  test:
#    runs-on: ubuntu-latest

#    steps:
#      - name: ‚è≥ Checkout du code
#        uses: actions/checkout@v2
#
#      - name: ‚è≥ R√©cup√©rer la variable d'environnement VITE_API_BASE_URL_BACK
#        env:
#          VITE_API_BASE_URL_BACK: ${{ secrets.VITE_API_BASE_URL_BACK }}
#        run: echo "VITE_API_BASE_URL_BACK=${VITE_API_BASE_URL_BACK}" >> .env
#
#      - name: ‚è≥ Afficher le contenu du fichier .env
#        run: cat .env
#
#      - name: üöß Cache node modules
#        id: cache-npm
#        uses: actions/cache@v3
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-build-${{ hashFiles('**/package-lock.json') }}
#          restore-keys: |
#            ${{ runner.os }}-build-
#
#      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
#        name: ‚è≥ List the state of node modules
#        continue-on-error: true
#        run: npm list
#
#      - name: ‚è≥ Install dependencies
#        run: npm install
#
#      - name: üöß Save node_modules
#        uses: actions/upload-artifact@v3
#        with:
#          name: node_modules
#          path: ~/.npm
#
#      - name: ‚è≥ Lintage du code
#        run: npm run lint
#
#      - name: üöÄ Lancement du projet en arri√®re-plan
#        run: |
#          npm run dev &
#          sleep 30  # Attendre quelques secondes pour que le projet d√©marre compl√®tement
#
#      - name: üöß Ex√©cuter les tests
#        run: |
#          npx cypress run

  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js (si ton projet utilise Node.js)
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: "Release ${{ github.ref }}"
          body: "Release auto-g√©n√©r√©e √† partir du commit ${{ github.sha }}"
          draft: false
          prerelease: false

      - name: Upload Release Assets (optionnel)
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./path/to/your/asset.zip
          asset_name: asset.zip
          asset_content_type: application/zip

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: D√©ploiement sur le VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd front-app/
            docker compose down
            git pull
            docker compose up --build -d
